{
  "compare" : null,
  "previous_successful_build" : {
    "build_num" : 3242,
    "status" : "success",
    "build_time_millis" : 16092
  },
  "build_parameters" : { },
  "oss" : true,
  "all_commit_details_truncated" : false,
  "committer_date" : "2022-07-26T22:05:36.000Z",
  "steps" : [ {
    "name" : "Install Google Chrome",
    "actions" : [ {
      "truncated" : false,
      "index" : 0,
      "parallel" : true,
      "failed" : null,
      "infrastructure_fail" : null,
      "name" : "Install Google Chrome",
      "bash_command" : "#!/bin/bash -eo pipefail\nif [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n\nCHROME_VERSION=latest\n# installation check\nif uname -a | grep Darwin > /dev/null 2>&1; then\n  if ls /Applications | grep \"Google Chrome\" > /dev/null 2>&1; then\n\n    echo \"$(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version)is already installed\"\n\n    exit 0\n  else\n    echo \"Google Chrome is not currently installed; installing it\"\n  fi\nelif cat /etc/issue | grep Alpine > /dev/null 2>&1; then\n  if command -v chromium-browser > /dev/null 2>&1; then\n\n    echo \"$(chromium-browser --version)is already installed to $(which chromium-browser)\"\n\n    exit 0\n\n  else\n    echo \"Google Chrome (via Chromium) is not currently installed; installing it\"\n  fi\nelif command -v yum > /dev/null 2>&1; then\n  if command -v google-chrome > /dev/null 2>&1; then\n    echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n    exit 0\n  else\n    echo \"Google Chrome is not currently installed; installing it\"\n  fi\nelse\n  if command -v google-chrome > /dev/null 2>&1; then\n\n    echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n    exit 0\n  else\n    echo \"Google Chrome is not currently installed; installing it\"\n  fi\nfi\n\n# install chrome\nif uname -a | grep Darwin > /dev/null 2>&1; then\n  brew update > /dev/null 2>&1 && \\\n    HOMEBREW_NO_AUTO_UPDATE=1 brew install google-chrome > /dev/null 2>&1\n\n  echo -e \"#\\!/bin/bash\\n\" > google-chrome\n  perl -i -pe \"s|#\\\\\\|#|g\" google-chrome\n  echo -e \"/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome \\\"\\$@\\\"\" >> google-chrome\n\n  $SUDO mv google-chrome /usr/local/bin\n  $SUDO chmod +x /usr/local/bin/google-chrome\n\n  # test/verify installation\n  if google-chrome --version > /dev/null 2>&1; then\n    echo \"$(google-chrome --version)has been installed in the /Applications directory\"\n    echo \"A shortcut has also been created at $(which google-chrome)\"\n    exit 0\n  else\n    echo \"Something went wrong; Google Chrome could not be installed\"\n    exit 1\n  fi\nelif command -v yum > /dev/null 2>&1; then\n  # download chrome\n  if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n    CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm\"\n  else\n    CHROME_URL=\"https://dl.google.com/linux/chrome/rpm/stable/x86_64/google-chrome-stable-$CHROME_VERSION-1.x86_64.rpm\"\n  fi\n\n  curl --silent --show-error --location --fail --retry 3 \\\n    --output google-chrome.rpm \\\n    $CHROME_URL\n  curl --silent --show-error --location --fail --retry 3 \\\n    --output liberation-fonts.rpm \\\n    http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm\n\n  $SUDO yum localinstall -y liberation-fonts.rpm \\\n    > /dev/null 2>&1\n\n  $SUDO yum localinstall -y google-chrome.rpm \\\n    > /dev/null 2>&1\n\n  rm -rf google-chrome.rpm liberation-fonts.rpm\nelse\n  # download chrome\n  if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n    CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\"\n  else\n    CHROME_URL=\"https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}-1_amd64.deb\"\n  fi\n  curl --silent --show-error --location --fail --retry 3 \\\n    --output google-chrome.deb $CHROME_URL\n\n  $SUDO apt-get update\n  # The pipe will install any dependencies missing\n  $SUDO dpkg -i google-chrome.deb || $SUDO apt-get -fy install\n  rm -rf google-chrome.deb\n  $SUDO sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' \"/opt/google/chrome/google-chrome\"\nfi\n\n# test/verify installation\nif [[ \"$CHROME_VERSION\" != \"latest\" ]]; then\n  if google-chrome --version | grep \"$CHROME_VERSION\" > /dev/null 2>&1; then\n    :\n  else\n    echo \"Something went wrong; Google Chrome could not be installed\"\n    exit 1\n  fi\nelse\n  if google-chrome --version  > /dev/null 2>&1; then\n    :\n  else\n    echo \"Something went wrong; Google Chrome could not be installed\"\n    exit 1\n  fi\n  echo \"$(google-chrome --version) has been installed to $(which google-chrome)\"\n  echo \"Chrome: $CHROME_VERSION\" >> ${HOME}/.browser-versions\nfi\n",
      "status" : "success",
      "timedout" : null,
      "continue" : null,
      "end_time" : "2022-07-26T22:05:53.784Z",
      "type" : "test",
      "allocation_id" : "62e06533a2cae673005e929c-0-build/342E829B",
      "output_url" : "https://circle-production-action-output.s3.amazonaws.com/1",
      "start_time" : "2022-07-26T22:05:44.011Z",
      "background" : false,
      "exit_code" : 0,
      "insignificant" : false,
      "canceled" : null,
      "step" : 101,
      "run_time_millis" : 9773,
      "has_output" : true
    }, {
      "truncated" : false,
      "index" : 1,
      "parallel" : true,
      "failed" : null,
      "infrastructure_fail" : null,
      "name" : "Install Google Chrome",
      "bash_command" : "#!/bin/bash -eo pipefail\nif [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n\nCHROME_VERSION=latest\n# installation check\nif uname -a | grep Darwin > /dev/null 2>&1; then\n  if ls /Applications | grep \"Google Chrome\" > /dev/null 2>&1; then\n\n    echo \"$(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version)is already installed\"\n\n    exit 0\n  else\n    echo \"Google Chrome is not currently installed; installing it\"\n  fi\nelif cat /etc/issue | grep Alpine > /dev/null 2>&1; then\n  if command -v chromium-browser > /dev/null 2>&1; then\n\n    echo \"$(chromium-browser --version)is already installed to $(which chromium-browser)\"\n\n    exit 0\n\n  else\n    echo \"Google Chrome (via Chromium) is not currently installed; installing it\"\n  fi\nelif command -v yum > /dev/null 2>&1; then\n  if command -v google-chrome > /dev/null 2>&1; then\n    echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n    exit 0\n  else\n    echo \"Google Chrome is not currently installed; installing it\"\n  fi\nelse\n  if command -v google-chrome > /dev/null 2>&1; then\n\n    echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n    exit 0\n  else\n    echo \"Google Chrome is not currently installed; installing it\"\n  fi\nfi\n\n# install chrome\nif uname -a | grep Darwin > /dev/null 2>&1; then\n  brew update > /dev/null 2>&1 && \\\n    HOMEBREW_NO_AUTO_UPDATE=1 brew install google-chrome > /dev/null 2>&1\n\n  echo -e \"#\\!/bin/bash\\n\" > google-chrome\n  perl -i -pe \"s|#\\\\\\|#|g\" google-chrome\n  echo -e \"/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome \\\"\\$@\\\"\" >> google-chrome\n\n  $SUDO mv google-chrome /usr/local/bin\n  $SUDO chmod +x /usr/local/bin/google-chrome\n\n  # test/verify installation\n  if google-chrome --version > /dev/null 2>&1; then\n    echo \"$(google-chrome --version)has been installed in the /Applications directory\"\n    echo \"A shortcut has also been created at $(which google-chrome)\"\n    exit 0\n  else\n    echo \"Something went wrong; Google Chrome could not be installed\"\n    exit 1\n  fi\nelif command -v yum > /dev/null 2>&1; then\n  # download chrome\n  if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n    CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm\"\n  else\n    CHROME_URL=\"https://dl.google.com/linux/chrome/rpm/stable/x86_64/google-chrome-stable-$CHROME_VERSION-1.x86_64.rpm\"\n  fi\n\n  curl --silent --show-error --location --fail --retry 3 \\\n    --output google-chrome.rpm \\\n    $CHROME_URL\n  curl --silent --show-error --location --fail --retry 3 \\\n    --output liberation-fonts.rpm \\\n    http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm\n\n  $SUDO yum localinstall -y liberation-fonts.rpm \\\n    > /dev/null 2>&1\n\n  $SUDO yum localinstall -y google-chrome.rpm \\\n    > /dev/null 2>&1\n\n  rm -rf google-chrome.rpm liberation-fonts.rpm\nelse\n  # download chrome\n  if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n    CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\"\n  else\n    CHROME_URL=\"https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}-1_amd64.deb\"\n  fi\n  curl --silent --show-error --location --fail --retry 3 \\\n    --output google-chrome.deb $CHROME_URL\n\n  $SUDO apt-get update\n  # The pipe will install any dependencies missing\n  $SUDO dpkg -i google-chrome.deb || $SUDO apt-get -fy install\n  rm -rf google-chrome.deb\n  $SUDO sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' \"/opt/google/chrome/google-chrome\"\nfi\n\n# test/verify installation\nif [[ \"$CHROME_VERSION\" != \"latest\" ]]; then\n  if google-chrome --version | grep \"$CHROME_VERSION\" > /dev/null 2>&1; then\n    :\n  else\n    echo \"Something went wrong; Google Chrome could not be installed\"\n    exit 1\n  fi\nelse\n  if google-chrome --version  > /dev/null 2>&1; then\n    :\n  else\n    echo \"Something went wrong; Google Chrome could not be installed\"\n    exit 1\n  fi\n  echo \"$(google-chrome --version) has been installed to $(which google-chrome)\"\n  echo \"Chrome: $CHROME_VERSION\" >> ${HOME}/.browser-versions\nfi\n",
      "status" : "success",
      "timedout" : null,
      "continue" : null,
      "end_time" : "2022-07-26T22:06:01.745Z",
      "type" : "test",
      "allocation_id" : "62e06533a2cae673005e929c-1-build/1737E8C8",
      "output_url" : "https://circle-production-action-output.s3.amazonaws.com/2",
      "start_time" : "2022-07-26T22:05:45.887Z",
      "background" : false,
      "exit_code" : 0,
      "insignificant" : false,
      "canceled" : null,
      "step" : 101,
      "run_time_millis" : 15858,
      "has_output" : true
    }, {
      "truncated" : false,
      "index" : 2,
      "parallel" : true,
      "failed" : true,
      "infrastructure_fail" : null,
      "name" : "Install Google Chrome",
      "bash_command" : "#!/bin/bash -eo pipefail\nif [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n\nCHROME_VERSION=latest\n# installation check\nif uname -a | grep Darwin > /dev/null 2>&1; then\n  if ls /Applications | grep \"Google Chrome\" > /dev/null 2>&1; then\n\n    echo \"$(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version)is already installed\"\n\n    exit 0\n  else\n    echo \"Google Chrome is not currently installed; installing it\"\n  fi\nelif cat /etc/issue | grep Alpine > /dev/null 2>&1; then\n  if command -v chromium-browser > /dev/null 2>&1; then\n\n    echo \"$(chromium-browser --version)is already installed to $(which chromium-browser)\"\n\n    exit 0\n\n  else\n    echo \"Google Chrome (via Chromium) is not currently installed; installing it\"\n  fi\nelif command -v yum > /dev/null 2>&1; then\n  if command -v google-chrome > /dev/null 2>&1; then\n    echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n    exit 0\n  else\n    echo \"Google Chrome is not currently installed; installing it\"\n  fi\nelse\n  if command -v google-chrome > /dev/null 2>&1; then\n\n    echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n    exit 0\n  else\n    echo \"Google Chrome is not currently installed; installing it\"\n  fi\nfi\n\n# install chrome\nif uname -a | grep Darwin > /dev/null 2>&1; then\n  brew update > /dev/null 2>&1 && \\\n    HOMEBREW_NO_AUTO_UPDATE=1 brew install google-chrome > /dev/null 2>&1\n\n  echo -e \"#\\!/bin/bash\\n\" > google-chrome\n  perl -i -pe \"s|#\\\\\\|#|g\" google-chrome\n  echo -e \"/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome \\\"\\$@\\\"\" >> google-chrome\n\n  $SUDO mv google-chrome /usr/local/bin\n  $SUDO chmod +x /usr/local/bin/google-chrome\n\n  # test/verify installation\n  if google-chrome --version > /dev/null 2>&1; then\n    echo \"$(google-chrome --version)has been installed in the /Applications directory\"\n    echo \"A shortcut has also been created at $(which google-chrome)\"\n    exit 0\n  else\n    echo \"Something went wrong; Google Chrome could not be installed\"\n    exit 1\n  fi\nelif command -v yum > /dev/null 2>&1; then\n  # download chrome\n  if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n    CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm\"\n  else\n    CHROME_URL=\"https://dl.google.com/linux/chrome/rpm/stable/x86_64/google-chrome-stable-$CHROME_VERSION-1.x86_64.rpm\"\n  fi\n\n  curl --silent --show-error --location --fail --retry 3 \\\n    --output google-chrome.rpm \\\n    $CHROME_URL\n  curl --silent --show-error --location --fail --retry 3 \\\n    --output liberation-fonts.rpm \\\n    http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm\n\n  $SUDO yum localinstall -y liberation-fonts.rpm \\\n    > /dev/null 2>&1\n\n  $SUDO yum localinstall -y google-chrome.rpm \\\n    > /dev/null 2>&1\n\n  rm -rf google-chrome.rpm liberation-fonts.rpm\nelse\n  # download chrome\n  if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n    CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\"\n  else\n    CHROME_URL=\"https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}-1_amd64.deb\"\n  fi\n  curl --silent --show-error --location --fail --retry 3 \\\n    --output google-chrome.deb $CHROME_URL\n\n  $SUDO apt-get update\n  # The pipe will install any dependencies missing\n  $SUDO dpkg -i google-chrome.deb || $SUDO apt-get -fy install\n  rm -rf google-chrome.deb\n  $SUDO sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' \"/opt/google/chrome/google-chrome\"\nfi\n\n# test/verify installation\nif [[ \"$CHROME_VERSION\" != \"latest\" ]]; then\n  if google-chrome --version | grep \"$CHROME_VERSION\" > /dev/null 2>&1; then\n    :\n  else\n    echo \"Something went wrong; Google Chrome could not be installed\"\n    exit 1\n  fi\nelse\n  if google-chrome --version  > /dev/null 2>&1; then\n    :\n  else\n    echo \"Something went wrong; Google Chrome could not be installed\"\n    exit 1\n  fi\n  echo \"$(google-chrome --version) has been installed to $(which google-chrome)\"\n  echo \"Chrome: $CHROME_VERSION\" >> ${HOME}/.browser-versions\nfi\n",
      "status" : "failed",
      "timedout" : null,
      "continue" : null,
      "end_time" : "2022-07-26T22:06:03.075Z",
      "type" : "test",
      "allocation_id" : "62e06533a2cae673005e929c-15-build/E5CB044",
      "output_url" : "https://circle-production-action-output.s3.amazonaws.com/3",
      "start_time" : "2022-07-26T22:06:02.894Z",
      "background" : false,
      "exit_code" : 56,
      "insignificant" : false,
      "canceled" : null,
      "step" : 101,
      "run_time_millis" : 181,
      "has_output" : true
    } ]
  }, {
    "name" : "Run tests with Knapsack Pro",
    "actions" : [ {
      "truncated" : false,
      "index" : 0,
      "parallel" : true,
      "failed" : null,
      "infrastructure_fail" : null,
      "name" : "Run tests with Knapsack Pro",
      "bash_command" : "#!/bin/bash -eo pipefail\nexport RAILS_ENV=test\nbundle exec rails \"knapsack_pro:queue:minitest[--verbose]\"\n",
      "status" : "success",
      "timedout" : null,
      "continue" : null,
      "end_time" : "2022-07-26T22:07:00.638Z",
      "type" : "test",
      "allocation_id" : "62e06533a2cae673005e929c-0-build/342E829B",
      "output_url" : "https://circle-production-action-output.s3.amazonaws.com/4",
      "start_time" : "2022-07-26T22:06:29.160Z",
      "background" : false,
      "exit_code" : 0,
      "insignificant" : false,
      "canceled" : null,
      "step" : 112,
      "run_time_millis" : 31478,
      "has_output" : true
    }, {
      "truncated" : false,
      "index" : 1,
      "parallel" : true,
      "failed" : null,
      "infrastructure_fail" : null,
      "name" : "Run tests with Knapsack Pro",
      "bash_command" : "#!/bin/bash -eo pipefail\nexport RAILS_ENV=test\nbundle exec rails \"knapsack_pro:queue:minitest[--verbose]\"\n",
      "status" : "success",
      "timedout" : null,
      "continue" : null,
      "end_time" : "2022-07-26T22:06:59.113Z",
      "type" : "test",
      "allocation_id" : "62e06533a2cae673005e929c-2-build/4C2D3CD",
      "output_url" : "https://circle-production-action-output.s3.amazonaws.com/5",
      "start_time" : "2022-07-26T22:06:30.274Z",
      "background" : false,
      "exit_code" : 0,
      "insignificant" : false,
      "canceled" : null,
      "step" : 112,
      "run_time_millis" : 28839,
      "has_output" : true
    }, {
      "truncated" : false,
      "index" : 2,
      "parallel" : true,
      "failed" : null,
      "infrastructure_fail" : null,
      "name" : "Run tests with Knapsack Pro",
      "bash_command" : "#!/bin/bash -eo pipefail\nexport RAILS_ENV=test\nbundle exec rails \"knapsack_pro:queue:minitest[--verbose]\"\n",
      "status" : "success",
      "timedout" : null,
      "continue" : null,
      "end_time" : "2022-07-26T22:07:00.216Z",
      "type" : "test",
      "allocation_id" : "62e06533a2cae673005e929c-14-build/3C333F94",
      "output_url" : "https://circle-production-action-output.s3.amazonaws.com/6",
      "start_time" : "2022-07-26T22:06:54.643Z",
      "background" : false,
      "exit_code" : 0,
      "insignificant" : false,
      "canceled" : null,
      "step" : 112,
      "run_time_millis" : 5573,
      "has_output" : true
    } ]
  } ],
  "body" : "Co-authored-by: depfu[bot] <23717796+depfu[bot]@users.noreply.github.com>",
  "usage_queued_at" : "2022-07-26T22:05:39.18Z",
  "context_ids" : [ ],
  "fail_reason" : null,
  "retry_of" : null,
  "reponame" : "bullet_train",
  "ssh_users" : [ ],
  "build_url" : "https://circleci.com/gh/bullet-train-co/bullet_train/3270",
  "parallel" : 16,
  "failed" : true,
  "branch" : "main",
  "username" : "bullet-train-co",
  "author_date" : "2022-07-26T22:05:36.000Z",
  "why" : "github",
  "user" : {
    "is_user" : true,
    "login" : "andrewculver",
    "avatar_url" : "https://avatars.githubusercontent.com/u/217218?v=4",
    "name" : "Andrew Culver",
    "vcs_type" : "github",
    "id" : 217218
  },
  "vcs_revision" : "ea7b05301d67bf66dcf0de92ef16da8f774d9020",
  "workflows" : {
    "job_name" : "Minitest",
    "job_id" : "3c75d1d9-1224-4678-b658-b9fbf446f0d2",
    "workflow_id" : "7319c18c-68ce-44b4-8c8e-72ee3cad2ab3",
    "workspace_id" : "7319c18c-68ce-44b4-8c8e-72ee3cad2ab3",
    "upstream_job_ids" : [ ],
    "upstream_concurrency_map" : { },
    "workflow_name" : "build"
  },
  "owners" : [ "andrewculver" ],
  "vcs_tag" : null,
  "pull_requests" : [ ],
  "build_num" : 3270,
  "infrastructure_fail" : false,
  "committer_email" : "noreply@github.com",
  "has_artifacts" : true,
  "previous" : {
    "build_num" : 3269,
    "status" : "success",
    "build_time_millis" : 16342
  },
  "status" : "failed",
  "committer_name" : "GitHub",
  "retries" : null,
  "subject" : "Update Node.js to version 18.6.0 (#299)",
  "vcs_type" : "github",
  "timedout" : false,
  "dont_build" : null,
  "lifecycle" : "finished",
  "stop_time" : "2022-07-26T22:07:04.852Z",
  "ssh_disabled" : true,
  "build_time_millis" : 84331,
  "picard" : {
    "executor" : "docker",
    "resource_class" : {
      "class" : "large",
      "name" : "Large",
      "cpu" : 4,
      "ram" : 8192
    }
  },
  "circle_yml" : {
    "string" : "# Orb 'circleci/ruby@0.1.2' resolved to 'circleci/ruby@0.1.2'\n# Orb 'circleci/browser-tools@1.1' resolved to 'circleci/browser-tools@1.1.3'\nversion: 2\njobs:\n  Standard Ruby:\n    docker:\n    - image: cimg/ruby:3.1.2-browsers\n      environment:\n        PGHOST: localhost\n        PGUSER: untitled_application\n        RAILS_ENV: test\n    steps:\n    - checkout\n    - restore_cache:\n        name: Restore Bundler cache\n        keys:\n        - gem-cache-v1-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}\n        - gem-cache-v1-{{ .Branch }}-\n        - gem-cache-v1-\n    - restore_cache:\n        name: Restore Yarn cache\n        keys:\n        - yarn-packages-v1-{{ .Branch }}-{{ checksum \"yarn.lock\" }}\n        - yarn-packages-v1-{{ .Branch }}-\n        - yarn-packages-\n    - run:\n        command: bundle install --path vendor/bundle\n    - run:\n        command: bundle clean --force\n    - run:\n        command: yarn install\n    - save_cache:\n        name: Save Bundle cache\n        key: gem-cache-v1-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}\n        paths:\n        - vendor/bundle\n    - save_cache:\n        name: Save Yarn cache\n        key: yarn-packages-v1-{{ .Branch }}-{{ checksum \"yarn.lock\" }}\n        paths:\n        - node_modules\n    - run:\n        name: Check Standard Ruby\n        command: bundle exec standardrb\n  Database Schema Check:\n    docker:\n    - image: cimg/ruby:3.1.2-browsers\n      environment:\n        PGHOST: localhost\n        PGUSER: untitled_application\n        RAILS_ENV: test\n    - image: cimg/postgres:14.2\n      environment:\n        POSTGRES_HOST_AUTH_METHOD: trust\n        POSTGRES_DB: untitled_application_test\n        POSTGRES_USER: untitled_application\n    - image: cimg/redis:6.2.6\n    parallelism: 1\n    steps:\n    - checkout\n    - restore_cache:\n        name: Restore Bundler cache\n        keys:\n        - gem-cache-v1-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}\n        - gem-cache-v1-{{ .Branch }}-\n        - gem-cache-v1-\n    - run:\n        command: bundle install --path vendor/bundle\n    - run:\n        name: Running rails db:migrate shouldn't cause changes\n        command: bash ./.circleci/db_schema_check\n  Minitest:\n    docker:\n    - image: cimg/ruby:3.1.2-browsers\n      environment:\n        PGHOST: localhost\n        PGUSER: untitled_application\n        RAILS_ENV: test\n    - image: cimg/postgres:14.2\n      environment:\n        POSTGRES_HOST_AUTH_METHOD: trust\n        POSTGRES_DB: untitled_application_test\n        POSTGRES_USER: untitled_application\n    - image: cimg/redis:6.2.6\n    parallelism: 16\n    steps:\n    - run:\n        command: |\n          if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n\n          CHROME_VERSION=latest\n          # installation check\n          if uname -a | grep Darwin > /dev/null 2>&1; then\n            if ls /Applications | grep \"Google Chrome\" > /dev/null 2>&1; then\n\n              echo \"$(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version)is already installed\"\n\n              exit 0\n            else\n              echo \"Google Chrome is not currently installed; installing it\"\n            fi\n          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then\n            if command -v chromium-browser > /dev/null 2>&1; then\n\n              echo \"$(chromium-browser --version)is already installed to $(which chromium-browser)\"\n\n              exit 0\n\n            else\n              echo \"Google Chrome (via Chromium) is not currently installed; installing it\"\n            fi\n          elif command -v yum > /dev/null 2>&1; then\n            if command -v google-chrome > /dev/null 2>&1; then\n              echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n              exit 0\n            else\n              echo \"Google Chrome is not currently installed; installing it\"\n            fi\n          else\n            if command -v google-chrome > /dev/null 2>&1; then\n\n              echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n              exit 0\n            else\n              echo \"Google Chrome is not currently installed; installing it\"\n            fi\n          fi\n\n          # install chrome\n          if uname -a | grep Darwin > /dev/null 2>&1; then\n            brew update > /dev/null 2>&1 && \\\n              HOMEBREW_NO_AUTO_UPDATE=1 brew install google-chrome > /dev/null 2>&1\n\n            echo -e \"#\\!/bin/bash\\n\" > google-chrome\n            perl -i -pe \"s|#\\\\\\|#|g\" google-chrome\n            echo -e \"/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome \\\"\\$@\\\"\" >> google-chrome\n\n            $SUDO mv google-chrome /usr/local/bin\n            $SUDO chmod +x /usr/local/bin/google-chrome\n\n            # test/verify installation\n            if google-chrome --version > /dev/null 2>&1; then\n              echo \"$(google-chrome --version)has been installed in the /Applications directory\"\n              echo \"A shortcut has also been created at $(which google-chrome)\"\n              exit 0\n            else\n              echo \"Something went wrong; Google Chrome could not be installed\"\n              exit 1\n            fi\n          elif command -v yum > /dev/null 2>&1; then\n            # download chrome\n            if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n              CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm\"\n            else\n              CHROME_URL=\"https://dl.google.com/linux/chrome/rpm/stable/x86_64/google-chrome-stable-$CHROME_VERSION-1.x86_64.rpm\"\n            fi\n\n            curl --silent --show-error --location --fail --retry 3 \\\n              --output google-chrome.rpm \\\n              $CHROME_URL\n            curl --silent --show-error --location --fail --retry 3 \\\n              --output liberation-fonts.rpm \\\n              http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm\n\n            $SUDO yum localinstall -y liberation-fonts.rpm \\\n              > /dev/null 2>&1\n\n            $SUDO yum localinstall -y google-chrome.rpm \\\n              > /dev/null 2>&1\n\n            rm -rf google-chrome.rpm liberation-fonts.rpm\n          else\n            # download chrome\n            if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n              CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\"\n            else\n              CHROME_URL=\"https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}-1_amd64.deb\"\n            fi\n            curl --silent --show-error --location --fail --retry 3 \\\n              --output google-chrome.deb $CHROME_URL\n\n            $SUDO apt-get update\n            # The pipe will install any dependencies missing\n            $SUDO dpkg -i google-chrome.deb || $SUDO apt-get -fy install\n            rm -rf google-chrome.deb\n            $SUDO sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' \"/opt/google/chrome/google-chrome\"\n          fi\n\n          # test/verify installation\n          if [[ \"$CHROME_VERSION\" != \"latest\" ]]; then\n            if google-chrome --version | grep \"$CHROME_VERSION\" > /dev/null 2>&1; then\n              :\n            else\n              echo \"Something went wrong; Google Chrome could not be installed\"\n              exit 1\n            fi\n          else\n            if google-chrome --version  > /dev/null 2>&1; then\n              :\n            else\n              echo \"Something went wrong; Google Chrome could not be installed\"\n              exit 1\n            fi\n            echo \"$(google-chrome --version) has been installed to $(which google-chrome)\"\n            echo \"Chrome: $CHROME_VERSION\" >> ${HOME}/.browser-versions\n          fi\n        name: Install Google Chrome\n    - run:\n        command: |\n          if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          # determine_chrome_version\n          if uname -a | grep Darwin> /dev/null 2>&1; then\n            echo \"System detected as MacOS\"\n            CHROME_VERSION=\"$(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version)\"\n            PLATFORM=mac64\n\n          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then\n            apk update > /dev/null 2>&1 && \\\n              apk add --no-cache chromium-chromedriver > /dev/null\n\n            # verify version\n            echo \"$(chromedriver --version) has been installed to $(which chromedriver)\"\n\n            exit 0\n          else\n            CHROME_VERSION=\"$(google-chrome --version)\"\n            PLATFORM=linux64\n          fi\n\n          CHROME_VERSION_STRING=\"$(echo $CHROME_VERSION | sed 's/.*Google Chrome //' | sed 's/.*Chromium //')\"\n\n          # print Chrome version\n          echo \"Installed version of Google Chrome is $CHROME_VERSION_STRING\"\n\n          # determine chromedriver release\n          CHROMEDRIVER_RELEASE=\"${CHROME_VERSION_STRING%%.*}\"\n\n          let CHROME_RELEASE=$CHROMEDRIVER_RELEASE\n\n          if [[ $CHROME_RELEASE -lt 70 ]]; then\n            # https://sites.google.com/a/chromium.org/chromedriver/downloads\n            # https://chromedriver.storage.googleapis.com/2.40/notes.txt\n\n            case $CHROME_RELEASE in\n            69)\n              CHROMEDRIVER_VERSION=\"2.44\";;\n            68)\n              CHROMEDRIVER_VERSION=\"2.42\";;\n            67)\n              CHROMEDRIVER_VERSION=\"2.41\";;\n            66)\n              CHROMEDRIVER_VERSION=\"2.40\";;\n            65)\n              CHROMEDRIVER_VERSION=\"2.38\";;\n            64)\n              CHROMEDRIVER_VERSION=\"2.37\";;\n            63)\n              CHROMEDRIVER_VERSION=\"2.36\";;\n            62)\n              CHROMEDRIVER_VERSION=\"2.35\";;\n            61)\n              CHROMEDRIVER_VERSION=\"2.34\";;\n            60)\n              CHROMEDRIVER_VERSION=\"2.33\";;\n            59)\n              CHROMEDRIVER_VERSION=\"2.32\";;\n            58)\n              CHROMEDRIVER_VERSION=\"2.31\";;\n            [56-57])\n              CHROMEDRIVER_VERSION=\"2.29\";;\n            55)\n              CHROMEDRIVER_VERSION=\"2.28\";;\n            54)\n              CHROMEDRIVER_VERSION=\"2.27\";;\n            53)\n              CHROMEDRIVER_VERSION=\"2.26\";;\n            52)\n              CHROMEDRIVER_VERSION=\"2.24\";;\n            51)\n              CHROMEDRIVER_VERSION=\"2.23\";;\n            [49-50])\n              CHROMEDRIVER_VERSION=\"2.22\";;\n            [46-48])\n              CHROMEDRIVER_VERSION=\"2.21\";;\n            [43-45])\n              CHROMEDRIVER_VERSION=\"2.20\";;\n            *)\n              echo \"Sorry, Google Chrome/Chromium version 43 or newer is required to use ChromeDriver\"\n              exit 1;;\n            esac\n          else\n            CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 3 \\\n              \"https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROMEDRIVER_RELEASE\")\n          fi\n\n          # installation check\n          if command -v chromedriver > /dev/null 2>&1; then\n            if chromedriver --version | grep \"$CHROMEDRIVER_VERSION\" > /dev/null 2>&1; then\n              echo \"ChromeDriver $CHROMEDRIVER_VERSION is already installed\"\n              exit 0\n            else\n              echo \"A different version of ChromeDriver is installed ($(chromedriver --version)); removing it\"\n              $SUDO rm -f $(command -v chromedriver)\n            fi\n          fi\n\n          echo \"ChromeDriver $CHROMEDRIVER_VERSION will be installed\"\n\n          # download chromedriver\n          curl --silent --show-error --location --fail --retry 3 \\\n            --output chromedriver_$PLATFORM.zip \\\n            \"http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_$PLATFORM.zip\"\n\n          # setup chromedriver installation\n          if command -v yum > /dev/null 2>&1; then\n            yum install -y unzip > /dev/null 2>&1\n          fi\n\n          unzip \"chromedriver_$PLATFORM.zip\" > /dev/null 2>&1\n          rm -rf \"chromedriver_$PLATFORM.zip\"\n\n          $SUDO mv chromedriver /usr/local/bin\n          $SUDO chmod +x /usr/local/bin/chromedriver\n\n          # test/verify version\n          if chromedriver --version | grep \"$CHROMEDRIVER_VERSION\" > /dev/null 2>&1; then\n            echo \"$(chromedriver --version) has been installed to $(which chromedriver)\"\n          else\n            echo \"Something went wrong; ChromeDriver could not be installed\"\n            exit 1\n          fi\n        name: Install ChromeDriver\n    - checkout\n    - restore_cache:\n        name: Restore Bundler cache\n        keys:\n        - gem-cache-v1-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}\n        - gem-cache-v1-{{ .Branch }}-\n        - gem-cache-v1-\n    - restore_cache:\n        name: Restore Yarn cache\n        keys:\n        - yarn-packages-v1-{{ .Branch }}-{{ checksum \"yarn.lock\" }}\n        - yarn-packages-v1-{{ .Branch }}-\n        - yarn-packages-\n    - run:\n        command: bundle install --path vendor/bundle\n    - run:\n        command: bin/link\n    - run:\n        command: yarn install\n    - run:\n        command: yarn build\n    - run:\n        command: yarn build:css\n    - run:\n        command: dockerize -wait tcp://localhost:5432 -timeout 1m\n    - run:\n        name: Run tests with Knapsack Pro\n        command: |\n          export RAILS_ENV=test\n          bundle exec rails \"knapsack_pro:queue:minitest[--verbose]\"\n        environment:\n          KNAPSACK_PRO_CI_NODE_TOTAL: 16\n  Minitest for Super Scaffolding:\n    docker:\n    - image: cimg/ruby:3.1.2-browsers\n      environment:\n        PGHOST: localhost\n        PGUSER: untitled_application\n        RAILS_ENV: test\n    - image: cimg/postgres:14.2\n      environment:\n        POSTGRES_HOST_AUTH_METHOD: trust\n        POSTGRES_DB: untitled_application_test\n        POSTGRES_USER: untitled_application\n    - image: cimg/redis:6.2.6\n    parallelism: 7\n    steps:\n    - run:\n        command: |\n          if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n\n          CHROME_VERSION=latest\n          # installation check\n          if uname -a | grep Darwin > /dev/null 2>&1; then\n            if ls /Applications | grep \"Google Chrome\" > /dev/null 2>&1; then\n\n              echo \"$(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version)is already installed\"\n\n              exit 0\n            else\n              echo \"Google Chrome is not currently installed; installing it\"\n            fi\n          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then\n            if command -v chromium-browser > /dev/null 2>&1; then\n\n              echo \"$(chromium-browser --version)is already installed to $(which chromium-browser)\"\n\n              exit 0\n\n            else\n              echo \"Google Chrome (via Chromium) is not currently installed; installing it\"\n            fi\n          elif command -v yum > /dev/null 2>&1; then\n            if command -v google-chrome > /dev/null 2>&1; then\n              echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n              exit 0\n            else\n              echo \"Google Chrome is not currently installed; installing it\"\n            fi\n          else\n            if command -v google-chrome > /dev/null 2>&1; then\n\n              echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n              exit 0\n            else\n              echo \"Google Chrome is not currently installed; installing it\"\n            fi\n          fi\n\n          # install chrome\n          if uname -a | grep Darwin > /dev/null 2>&1; then\n            brew update > /dev/null 2>&1 && \\\n              HOMEBREW_NO_AUTO_UPDATE=1 brew install google-chrome > /dev/null 2>&1\n\n            echo -e \"#\\!/bin/bash\\n\" > google-chrome\n            perl -i -pe \"s|#\\\\\\|#|g\" google-chrome\n            echo -e \"/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome \\\"\\$@\\\"\" >> google-chrome\n\n            $SUDO mv google-chrome /usr/local/bin\n            $SUDO chmod +x /usr/local/bin/google-chrome\n\n            # test/verify installation\n            if google-chrome --version > /dev/null 2>&1; then\n              echo \"$(google-chrome --version)has been installed in the /Applications directory\"\n              echo \"A shortcut has also been created at $(which google-chrome)\"\n              exit 0\n            else\n              echo \"Something went wrong; Google Chrome could not be installed\"\n              exit 1\n            fi\n          elif command -v yum > /dev/null 2>&1; then\n            # download chrome\n            if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n              CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm\"\n            else\n              CHROME_URL=\"https://dl.google.com/linux/chrome/rpm/stable/x86_64/google-chrome-stable-$CHROME_VERSION-1.x86_64.rpm\"\n            fi\n\n            curl --silent --show-error --location --fail --retry 3 \\\n              --output google-chrome.rpm \\\n              $CHROME_URL\n            curl --silent --show-error --location --fail --retry 3 \\\n              --output liberation-fonts.rpm \\\n              http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm\n\n            $SUDO yum localinstall -y liberation-fonts.rpm \\\n              > /dev/null 2>&1\n\n            $SUDO yum localinstall -y google-chrome.rpm \\\n              > /dev/null 2>&1\n\n            rm -rf google-chrome.rpm liberation-fonts.rpm\n          else\n            # download chrome\n            if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n              CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\"\n            else\n              CHROME_URL=\"https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}-1_amd64.deb\"\n            fi\n            curl --silent --show-error --location --fail --retry 3 \\\n              --output google-chrome.deb $CHROME_URL\n\n            $SUDO apt-get update\n            # The pipe will install any dependencies missing\n            $SUDO dpkg -i google-chrome.deb || $SUDO apt-get -fy install\n            rm -rf google-chrome.deb\n            $SUDO sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' \"/opt/google/chrome/google-chrome\"\n          fi\n\n          # test/verify installation\n          if [[ \"$CHROME_VERSION\" != \"latest\" ]]; then\n            if google-chrome --version | grep \"$CHROME_VERSION\" > /dev/null 2>&1; then\n              :\n            else\n              echo \"Something went wrong; Google Chrome could not be installed\"\n              exit 1\n            fi\n          else\n            if google-chrome --version  > /dev/null 2>&1; then\n              :\n            else\n              echo \"Something went wrong; Google Chrome could not be installed\"\n              exit 1\n            fi\n            echo \"$(google-chrome --version) has been installed to $(which google-chrome)\"\n            echo \"Chrome: $CHROME_VERSION\" >> ${HOME}/.browser-versions\n          fi\n        name: Install Google Chrome\n    - run:\n        command: |\n          if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          # determine_chrome_version\n          if uname -a | grep Darwin> /dev/null 2>&1; then\n            echo \"System detected as MacOS\"\n            CHROME_VERSION=\"$(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version)\"\n            PLATFORM=mac64\n\n          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then\n            apk update > /dev/null 2>&1 && \\\n              apk add --no-cache chromium-chromedriver > /dev/null\n\n            # verify version\n            echo \"$(chromedriver --version) has been installed to $(which chromedriver)\"\n\n            exit 0\n          else\n            CHROME_VERSION=\"$(google-chrome --version)\"\n            PLATFORM=linux64\n          fi\n\n          CHROME_VERSION_STRING=\"$(echo $CHROME_VERSION | sed 's/.*Google Chrome //' | sed 's/.*Chromium //')\"\n\n          # print Chrome version\n          echo \"Installed version of Google Chrome is $CHROME_VERSION_STRING\"\n\n          # determine chromedriver release\n          CHROMEDRIVER_RELEASE=\"${CHROME_VERSION_STRING%%.*}\"\n\n          let CHROME_RELEASE=$CHROMEDRIVER_RELEASE\n\n          if [[ $CHROME_RELEASE -lt 70 ]]; then\n            # https://sites.google.com/a/chromium.org/chromedriver/downloads\n            # https://chromedriver.storage.googleapis.com/2.40/notes.txt\n\n            case $CHROME_RELEASE in\n            69)\n              CHROMEDRIVER_VERSION=\"2.44\";;\n            68)\n              CHROMEDRIVER_VERSION=\"2.42\";;\n            67)\n              CHROMEDRIVER_VERSION=\"2.41\";;\n            66)\n              CHROMEDRIVER_VERSION=\"2.40\";;\n            65)\n              CHROMEDRIVER_VERSION=\"2.38\";;\n            64)\n              CHROMEDRIVER_VERSION=\"2.37\";;\n            63)\n              CHROMEDRIVER_VERSION=\"2.36\";;\n            62)\n              CHROMEDRIVER_VERSION=\"2.35\";;\n            61)\n              CHROMEDRIVER_VERSION=\"2.34\";;\n            60)\n              CHROMEDRIVER_VERSION=\"2.33\";;\n            59)\n              CHROMEDRIVER_VERSION=\"2.32\";;\n            58)\n              CHROMEDRIVER_VERSION=\"2.31\";;\n            [56-57])\n              CHROMEDRIVER_VERSION=\"2.29\";;\n            55)\n              CHROMEDRIVER_VERSION=\"2.28\";;\n            54)\n              CHROMEDRIVER_VERSION=\"2.27\";;\n            53)\n              CHROMEDRIVER_VERSION=\"2.26\";;\n            52)\n              CHROMEDRIVER_VERSION=\"2.24\";;\n            51)\n              CHROMEDRIVER_VERSION=\"2.23\";;\n            [49-50])\n              CHROMEDRIVER_VERSION=\"2.22\";;\n            [46-48])\n              CHROMEDRIVER_VERSION=\"2.21\";;\n            [43-45])\n              CHROMEDRIVER_VERSION=\"2.20\";;\n            *)\n              echo \"Sorry, Google Chrome/Chromium version 43 or newer is required to use ChromeDriver\"\n              exit 1;;\n            esac\n          else\n            CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 3 \\\n              \"https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROMEDRIVER_RELEASE\")\n          fi\n\n          # installation check\n          if command -v chromedriver > /dev/null 2>&1; then\n            if chromedriver --version | grep \"$CHROMEDRIVER_VERSION\" > /dev/null 2>&1; then\n              echo \"ChromeDriver $CHROMEDRIVER_VERSION is already installed\"\n              exit 0\n            else\n              echo \"A different version of ChromeDriver is installed ($(chromedriver --version)); removing it\"\n              $SUDO rm -f $(command -v chromedriver)\n            fi\n          fi\n\n          echo \"ChromeDriver $CHROMEDRIVER_VERSION will be installed\"\n\n          # download chromedriver\n          curl --silent --show-error --location --fail --retry 3 \\\n            --output chromedriver_$PLATFORM.zip \\\n            \"http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_$PLATFORM.zip\"\n\n          # setup chromedriver installation\n          if command -v yum > /dev/null 2>&1; then\n            yum install -y unzip > /dev/null 2>&1\n          fi\n\n          unzip \"chromedriver_$PLATFORM.zip\" > /dev/null 2>&1\n          rm -rf \"chromedriver_$PLATFORM.zip\"\n\n          $SUDO mv chromedriver /usr/local/bin\n          $SUDO chmod +x /usr/local/bin/chromedriver\n\n          # test/verify version\n          if chromedriver --version | grep \"$CHROMEDRIVER_VERSION\" > /dev/null 2>&1; then\n            echo \"$(chromedriver --version) has been installed to $(which chromedriver)\"\n          else\n            echo \"Something went wrong; ChromeDriver could not be installed\"\n            exit 1\n          fi\n        name: Install ChromeDriver\n    - checkout\n    - restore_cache:\n        name: Restore Bundler cache\n        keys:\n        - gem-cache-v1-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}\n        - gem-cache-v1-{{ .Branch }}-\n        - gem-cache-v1-\n    - restore_cache:\n        name: Restore Yarn cache\n        keys:\n        - yarn-packages-v1-{{ .Branch }}-{{ checksum \"yarn.lock\" }}\n        - yarn-packages-v1-{{ .Branch }}-\n        - yarn-packages-\n    - run:\n        command: bundle install --path vendor/bundle\n    - run:\n        command: bin/link\n    - run:\n        command: yarn install\n    - run:\n        command: yarn build\n    - run:\n        command: yarn build:css\n    - run:\n        command: dockerize -wait tcp://localhost:5432 -timeout 1m\n    - run:\n        command: bundle add spring\n    - run:\n        name: Setup Super Scaffolding System Test\n        command: bundle exec test/bin/setup-super-scaffolding-system-test\n    - run:\n        name: Run Super Scaffolding Test\n        command: bundle exec rails test test/system/super_scaffolding_test.rb\n  System Tests with Cuprite:\n    docker:\n    - image: cimg/ruby:3.1.2-browsers\n      environment:\n        PGHOST: localhost\n        PGUSER: untitled_application\n        RAILS_ENV: test\n    - image: cimg/postgres:14.2\n      environment:\n        POSTGRES_HOST_AUTH_METHOD: trust\n        POSTGRES_DB: untitled_application_test\n        POSTGRES_USER: untitled_application\n    - image: circleci/redis\n    parallelism: 16\n    steps:\n    - run:\n        command: |\n          if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n\n          CHROME_VERSION=latest\n          # installation check\n          if uname -a | grep Darwin > /dev/null 2>&1; then\n            if ls /Applications | grep \"Google Chrome\" > /dev/null 2>&1; then\n\n              echo \"$(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version)is already installed\"\n\n              exit 0\n            else\n              echo \"Google Chrome is not currently installed; installing it\"\n            fi\n          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then\n            if command -v chromium-browser > /dev/null 2>&1; then\n\n              echo \"$(chromium-browser --version)is already installed to $(which chromium-browser)\"\n\n              exit 0\n\n            else\n              echo \"Google Chrome (via Chromium) is not currently installed; installing it\"\n            fi\n          elif command -v yum > /dev/null 2>&1; then\n            if command -v google-chrome > /dev/null 2>&1; then\n              echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n              exit 0\n            else\n              echo \"Google Chrome is not currently installed; installing it\"\n            fi\n          else\n            if command -v google-chrome > /dev/null 2>&1; then\n\n              echo \"$(google-chrome --version)is already installed to $(which google-chrome)\"\n\n              exit 0\n            else\n              echo \"Google Chrome is not currently installed; installing it\"\n            fi\n          fi\n\n          # install chrome\n          if uname -a | grep Darwin > /dev/null 2>&1; then\n            brew update > /dev/null 2>&1 && \\\n              HOMEBREW_NO_AUTO_UPDATE=1 brew install google-chrome > /dev/null 2>&1\n\n            echo -e \"#\\!/bin/bash\\n\" > google-chrome\n            perl -i -pe \"s|#\\\\\\|#|g\" google-chrome\n            echo -e \"/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome \\\"\\$@\\\"\" >> google-chrome\n\n            $SUDO mv google-chrome /usr/local/bin\n            $SUDO chmod +x /usr/local/bin/google-chrome\n\n            # test/verify installation\n            if google-chrome --version > /dev/null 2>&1; then\n              echo \"$(google-chrome --version)has been installed in the /Applications directory\"\n              echo \"A shortcut has also been created at $(which google-chrome)\"\n              exit 0\n            else\n              echo \"Something went wrong; Google Chrome could not be installed\"\n              exit 1\n            fi\n          elif command -v yum > /dev/null 2>&1; then\n            # download chrome\n            if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n              CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm\"\n            else\n              CHROME_URL=\"https://dl.google.com/linux/chrome/rpm/stable/x86_64/google-chrome-stable-$CHROME_VERSION-1.x86_64.rpm\"\n            fi\n\n            curl --silent --show-error --location --fail --retry 3 \\\n              --output google-chrome.rpm \\\n              $CHROME_URL\n            curl --silent --show-error --location --fail --retry 3 \\\n              --output liberation-fonts.rpm \\\n              http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm\n\n            $SUDO yum localinstall -y liberation-fonts.rpm \\\n              > /dev/null 2>&1\n\n            $SUDO yum localinstall -y google-chrome.rpm \\\n              > /dev/null 2>&1\n\n            rm -rf google-chrome.rpm liberation-fonts.rpm\n          else\n            # download chrome\n            if [[ \"$CHROME_VERSION\" == \"latest\" ]]; then\n              CHROME_URL=\"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\"\n            else\n              CHROME_URL=\"https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}-1_amd64.deb\"\n            fi\n            curl --silent --show-error --location --fail --retry 3 \\\n              --output google-chrome.deb $CHROME_URL\n\n            $SUDO apt-get update\n            # The pipe will install any dependencies missing\n            $SUDO dpkg -i google-chrome.deb || $SUDO apt-get -fy install\n            rm -rf google-chrome.deb\n            $SUDO sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox --no-sandbox|g' \"/opt/google/chrome/google-chrome\"\n          fi\n\n          # test/verify installation\n          if [[ \"$CHROME_VERSION\" != \"latest\" ]]; then\n            if google-chrome --version | grep \"$CHROME_VERSION\" > /dev/null 2>&1; then\n              :\n            else\n              echo \"Something went wrong; Google Chrome could not be installed\"\n              exit 1\n            fi\n          else\n            if google-chrome --version  > /dev/null 2>&1; then\n              :\n            else\n              echo \"Something went wrong; Google Chrome could not be installed\"\n              exit 1\n            fi\n            echo \"$(google-chrome --version) has been installed to $(which google-chrome)\"\n            echo \"Chrome: $CHROME_VERSION\" >> ${HOME}/.browser-versions\n          fi\n        name: Install Google Chrome\n    - run:\n        command: |\n          if [[ $EUID == 0 ]]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n          # determine_chrome_version\n          if uname -a | grep Darwin> /dev/null 2>&1; then\n            echo \"System detected as MacOS\"\n            CHROME_VERSION=\"$(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version)\"\n            PLATFORM=mac64\n\n          elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then\n            apk update > /dev/null 2>&1 && \\\n              apk add --no-cache chromium-chromedriver > /dev/null\n\n            # verify version\n            echo \"$(chromedriver --version) has been installed to $(which chromedriver)\"\n\n            exit 0\n          else\n            CHROME_VERSION=\"$(google-chrome --version)\"\n            PLATFORM=linux64\n          fi\n\n          CHROME_VERSION_STRING=\"$(echo $CHROME_VERSION | sed 's/.*Google Chrome //' | sed 's/.*Chromium //')\"\n\n          # print Chrome version\n          echo \"Installed version of Google Chrome is $CHROME_VERSION_STRING\"\n\n          # determine chromedriver release\n          CHROMEDRIVER_RELEASE=\"${CHROME_VERSION_STRING%%.*}\"\n\n          let CHROME_RELEASE=$CHROMEDRIVER_RELEASE\n\n          if [[ $CHROME_RELEASE -lt 70 ]]; then\n            # https://sites.google.com/a/chromium.org/chromedriver/downloads\n            # https://chromedriver.storage.googleapis.com/2.40/notes.txt\n\n            case $CHROME_RELEASE in\n            69)\n              CHROMEDRIVER_VERSION=\"2.44\";;\n            68)\n              CHROMEDRIVER_VERSION=\"2.42\";;\n            67)\n              CHROMEDRIVER_VERSION=\"2.41\";;\n            66)\n              CHROMEDRIVER_VERSION=\"2.40\";;\n            65)\n              CHROMEDRIVER_VERSION=\"2.38\";;\n            64)\n              CHROMEDRIVER_VERSION=\"2.37\";;\n            63)\n              CHROMEDRIVER_VERSION=\"2.36\";;\n            62)\n              CHROMEDRIVER_VERSION=\"2.35\";;\n            61)\n              CHROMEDRIVER_VERSION=\"2.34\";;\n            60)\n              CHROMEDRIVER_VERSION=\"2.33\";;\n            59)\n              CHROMEDRIVER_VERSION=\"2.32\";;\n            58)\n              CHROMEDRIVER_VERSION=\"2.31\";;\n            [56-57])\n              CHROMEDRIVER_VERSION=\"2.29\";;\n            55)\n              CHROMEDRIVER_VERSION=\"2.28\";;\n            54)\n              CHROMEDRIVER_VERSION=\"2.27\";;\n            53)\n              CHROMEDRIVER_VERSION=\"2.26\";;\n            52)\n              CHROMEDRIVER_VERSION=\"2.24\";;\n            51)\n              CHROMEDRIVER_VERSION=\"2.23\";;\n            [49-50])\n              CHROMEDRIVER_VERSION=\"2.22\";;\n            [46-48])\n              CHROMEDRIVER_VERSION=\"2.21\";;\n            [43-45])\n              CHROMEDRIVER_VERSION=\"2.20\";;\n            *)\n              echo \"Sorry, Google Chrome/Chromium version 43 or newer is required to use ChromeDriver\"\n              exit 1;;\n            esac\n          else\n            CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 3 \\\n              \"https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROMEDRIVER_RELEASE\")\n          fi\n\n          # installation check\n          if command -v chromedriver > /dev/null 2>&1; then\n            if chromedriver --version | grep \"$CHROMEDRIVER_VERSION\" > /dev/null 2>&1; then\n              echo \"ChromeDriver $CHROMEDRIVER_VERSION is already installed\"\n              exit 0\n            else\n              echo \"A different version of ChromeDriver is installed ($(chromedriver --version)); removing it\"\n              $SUDO rm -f $(command -v chromedriver)\n            fi\n          fi\n\n          echo \"ChromeDriver $CHROMEDRIVER_VERSION will be installed\"\n\n          # download chromedriver\n          curl --silent --show-error --location --fail --retry 3 \\\n            --output chromedriver_$PLATFORM.zip \\\n            \"http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_$PLATFORM.zip\"\n\n          # setup chromedriver installation\n          if command -v yum > /dev/null 2>&1; then\n            yum install -y unzip > /dev/null 2>&1\n          fi\n\n          unzip \"chromedriver_$PLATFORM.zip\" > /dev/null 2>&1\n          rm -rf \"chromedriver_$PLATFORM.zip\"\n\n          $SUDO mv chromedriver /usr/local/bin\n          $SUDO chmod +x /usr/local/bin/chromedriver\n\n          # test/verify version\n          if chromedriver --version | grep \"$CHROMEDRIVER_VERSION\" > /dev/null 2>&1; then\n            echo \"$(chromedriver --version) has been installed to $(which chromedriver)\"\n          else\n            echo \"Something went wrong; ChromeDriver could not be installed\"\n            exit 1\n          fi\n        name: Install ChromeDriver\n    - checkout\n    - restore_cache:\n        name: Restore Bundler cache\n        keys:\n        - gem-cache-v1-{{ .Branch }}-{{ checksum \"Gemfile.lock\" }}\n        - gem-cache-v1-{{ .Branch }}-\n        - gem-cache-v1-\n    - restore_cache:\n        name: Restore Yarn cache\n        keys:\n        - yarn-packages-v1-{{ .Branch }}-{{ checksum \"yarn.lock\" }}\n        - yarn-packages-v1-{{ .Branch }}-\n        - yarn-packages-\n    - run:\n        command: bundle install --path vendor/bundle\n    - run:\n        command: bin/link\n    - run:\n        command: yarn install\n    - run:\n        command: yarn build\n    - run:\n        command: yarn build:css\n    - run:\n        command: dockerize -wait tcp://localhost:5432 -timeout 1m\n    - run:\n        name: Run system tests with cuprite as system test driver\n        command: |\n          if test $BT_CORE_CI\n          then\n            echo \"Running system tests with Cuprite\"\n            sed -i'.orig' 's/# gem \"cuprite\"/gem \"cuprite\"/' Gemfile\n            sed -i'.orig' 's/gem \"selenium-webdriver\"/# gem \"selenium-webdriver\"/' Gemfile\n            sed -i'.orig' 's/gem \"webdrivers\"/# gem \"webdrivers\"/' Gemfile\n            bundle install\n            bundle exec rails \"knapsack_pro:queue:minitest[--verbose]\"\n          else\n            echo \"Skipping system tests with Cuprite\"\n            exit 0\n          fi\n        environment:\n          RAILS_ENV: test\n          KNAPSACK_PRO_CI_NODE_TOTAL: 16\n          KNAPSACK_PRO_TEST_FILE_PATTERN: test/system/**{,/*/**}/*_test.rb\nworkflows:\n  version: 2\n  build:\n    jobs:\n    - Standard Ruby\n    - Database Schema Check\n    - Minitest\n    - Minitest for Super Scaffolding\n    - System Tests with Cuprite\n"
  },
  "messages" : [ ],
  "is_first_green_build" : false,
  "job_name" : null,
  "start_time" : "2022-07-26T22:05:40.724Z",
  "canceler" : null,
  "all_commit_details" : [ {
    "committer_date" : "2022-07-26T22:05:36.000Z",
    "body" : "Co-authored-by: depfu[bot] <23717796+depfu[bot]@users.noreply.github.com>",
    "branch" : "main",
    "author_date" : "2022-07-26T22:05:36.000Z",
    "committer_email" : "noreply@github.com",
    "commit" : "ea7b05301d67bf66dcf0de92ef16da8f774d9020",
    "committer_login" : "web-flow",
    "committer_name" : "GitHub",
    "subject" : "Update Node.js to version 18.6.0 (#299)",
    "commit_url" : "https://github.com/bullet-train-co/bullet_train/commit/ea7b05301d67bf66dcf0de92ef16da8f774d9020",
    "author_login" : "depfu[bot]",
    "author_name" : "depfu[bot]",
    "author_email" : "23717796+depfu[bot]@users.noreply.github.com"
  } ],
  "platform" : "2.0",
  "outcome" : "failed",
  "vcs_url" : "https://github.com/bullet-train-co/bullet_train",
  "author_name" : "depfu[bot]",
  "node" : null,
  "queued_at" : "2022-07-26T22:05:39.292Z",
  "canceled" : false,
  "author_email" : "23717796+depfu[bot]@users.noreply.github.com"
}
